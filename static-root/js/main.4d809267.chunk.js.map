{"version":3,"sources":["logo.svg","lookup/components.js","tweets/lookup.js","tweets/buttons.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","status","response","detail","window","location","href","onerror","e","console","log","message","send","apiTweetList","username","nextUrl","undefined","replace","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","type","handleBackendEvent","onClick","event","preventDefault","tweetId","id","apiTweetAction","ParentTweet","parent","Tweet","isRetweet","hideAction","didRetweet","useState","actionTweet","setActionTweet","match","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","user","first_name","last_name","content","Fragment","TweetList","tweetsInit","setTweetsInit","tweets","setTweets","setNextUrl","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","next","results","alert","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetCreate","didTweet","textAreaRef","React","createRef","handleBackendUpdate","onSubmit","newVal","current","value","ref","required","TweetComponent","canTweet","setNewTweets","tempNewTweets","div","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","src","logo","alt","Boolean","hostname","appEl","getElementById","ReactDOM","render","StrictMode","createElement","tweetsEl","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.4d809267.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\r\n  let cookieValue = null;\r\n  if (document.cookie && document.cookie !== \"\") {\r\n    const cookies = document.cookie.split(\";\");\r\n    for (let i = 0; i < cookies.length; i++) {\r\n      const cookie = cookies[i].trim();\r\n      // Does this cookie string begin with the name we want?\r\n      if (cookie.substring(0, name.length + 1) === name + \"=\") {\r\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\nexport function backendLookup(method, endpoint, callback, data) {\r\n  let jsonData;\r\n  if (data) {\r\n    jsonData = JSON.stringify(data);\r\n  }\r\n  const xhr = new XMLHttpRequest();\r\n  const url = `http://localhost:8000/api${endpoint}`\r\n  xhr.responseType = \"json\"\r\n  const csrftoken = getCookie('csrftoken')\r\n  xhr.open(method, url)\r\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\")\r\n  \r\n  \r\n  if (csrftoken){\r\n\r\n     \r\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n    //xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\r\n  };\r\n  xhr.onload = function () {\r\n    if (xhr.status === 403) {\r\n      const detail= xhr.response.detail\r\n      if(detail === \"Authentication credentials were not provided.\"){\r\n      window.location.href = \"/login?showLoginReguired=true\";\r\n      }\r\n    }\r\n    callback(xhr.response, xhr.status);\r\n  };\r\n  xhr.onerror = function (e) {\r\n    console.log(e);\r\n    callback({ message: \"The request was an error\" }, 400)\r\n  };\r\n  \r\n  xhr.send(jsonData)\r\n}\r\n  ","import {backendLookup} from '../lookup'\r\n\r\nexport function apiTweetCreate(newTweet, callback){\r\n    backendLookup(\"POST\",\"/tweets/create/\", callback, {content: newTweet})   \r\n  \r\n  }\r\n\r\nexport function apiTweetAction(tweetId,action, callback){\r\n    const data = {id:tweetId, action: action}  \r\n    backendLookup(\"POST\",\"/tweets/action/\", callback,data)   \r\n  \r\n  }\r\n  \r\nexport function apiTweetDetail(tweetId,callback) {\r\n    \r\n    backendLookup(\"GET\",`/tweets/${tweetId}/`,callback)    \r\n  }\r\n\r\n\r\n  \r\nexport function apiTweetList(username,callback, nextUrl) {\r\n    let endpoint = \"/tweets/\"\r\n    if (username){\r\n      endpoint = `/tweets/?username=${username}`\r\n\r\n    }\r\n    if (nextUrl !== null && nextUrl !== undefined) {\r\n      endpoint = nextUrl.replace(\"http://localhost:8000/api\", \"\")\r\n    }\r\n    backendLookup(\"GET\",endpoint,callback)    \r\n  }","import React from 'react'\r\n\r\nimport {apiTweetAction} from './lookup'\r\n\r\nexport function ActionBtn(props){\r\n    const{tweet, action , didPerformAction} = props\r\n    const likes = tweet.likes ? tweet.likes:0\r\n    \r\n    const className = props.className ? props.className:'btn btn-primary btn-sm'\r\n    const actionDisplay = action.display ? action.display: 'Action'\r\n    const display = action.type ==='like'? `${likes} ${action.display}`: actionDisplay\r\n    const handleBackendEvent =(response,status)=>{\r\n      console.log(response,status)\r\n      if ((status === 200 || status === 201)&& didPerformAction) {\r\n        \r\n        didPerformAction(response,status)\r\n      }\r\n\r\n        \r\n    }\r\n\r\n    \r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        apiTweetAction(tweet.id , action.type,handleBackendEvent)\r\n        \r\n    }\r\n    return <button className={className} onClick= {handleClick}> {display} </button> \r\n  }","import React,{useState} from 'react'\r\nimport {ActionBtn} from './buttons'\r\n\r\n\r\n\r\nexport function ParentTweet(props) {\r\n    const{tweet} = props\r\n    return tweet.parent ? <Tweet isRetweet hideAction className={''} tweet={tweet.parent} /> : null\r\n  } \r\n  \r\n  export function Tweet(props) {\r\n      const{tweet,didRetweet,hideAction, isRetweet} = props\r\n      const [actionTweet,setActionTweet]= useState (props.tweet ? props.tweet :null)\r\n      const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n      const path = window.location.pathname\r\n      const match= path.match(/(?<tweetid>\\d+)/)\r\n      const urlTweetId = match ? match.groups.tweetid : -1\r\n\r\n      const isDetail= `${tweet.id}`===`${urlTweetId}`\r\n      const handleLink = (event) =>{\r\n        event.preventDefault()\r\n        window.location.href =`/${tweet.id}`\r\n\r\n      }\r\n\r\n      const handlePerformAction = (newActionTweet, status) => {\r\n        if(status === 200) {\r\n          setActionTweet(newActionTweet)\r\n        } else if (status===201) {\r\n          if (didRetweet){\r\n            didRetweet(newActionTweet)\r\n          }\r\n  \r\n        } \r\n        \r\n      }\r\n      \r\n      return <div className={className}>\r\n       <div className='d-flex'>\r\n        <div className='col-1'>\r\n          <span className='px-3 py-2 rounded-circle bg-dark text-white'>\r\n          {tweet.user.username[0]}\r\n          </span>\r\n\r\n        </div>\r\n        <div className='col-11'>\r\n        <div>\r\n         {isRetweet=== true && <span className ='small text-muted'>Retweet</span>}\r\n          <p>\r\n            {tweet.user.first_name}{\" \"}\r\n            {tweet.user.last_name}{\" \"}\r\n            @{tweet.user.username}\r\n          </p>\r\n          <p>{tweet.content}</p>\r\n          \r\n          <ParentTweet tweet={tweet} />\r\n        </div>\r\n        \r\n        <div className='btn btn-group px-0'>\r\n        \r\n        {(actionTweet && hideAction !==true) && <React.Fragment>\r\n          <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:'like', display:\"Likes\"}}/>\r\n          <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:'unlike', display:\"Unlike\"}}/>\r\n          <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type:'retweet', display:\"Retweet\"}}/>\r\n        </React.Fragment>\r\n        }  \r\n          {isDetail === true ? null :<button className='btn btn-outline-primary' onClick={handleLink}>View</button>}\r\n        </div>\r\n      </div>  \r\n     </div>\r\n     </div> \r\n    }","import React,{useEffect, useState} from 'react'\r\nimport {apiTweetList} from './lookup'\r\nimport {Tweet} from './detail'\r\n\r\n\r\nexport function TweetList(props) {\r\n    const[tweetsInit, setTweetsInit] = useState([])\r\n    const [tweets,setTweets] = useState([])\r\n    const [nextUrl, setNextUrl] = useState(null)\r\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\r\n    useEffect(()=>{\r\n        const final = [...props.newTweets].concat(tweetsInit)\r\n        if(final.length !== tweets.length) {\r\n          setTweets(final)\r\n        } \r\n  \r\n    }, [props.newTweets,tweets,tweetsInit])\r\n  \r\n    useEffect(()=>{\r\n        //Lookup\r\n        if (tweetsDidSet=== false) {\r\n        const handleTweetListLookup= (response,status) =>{      \r\n          if (status===200){\r\n            setNextUrl(response.next)\r\n            setTweetsInit(response.results)\r\n            setTweetsDidSet(true)\r\n          } else{\r\n            alert(\"There was an error\")\r\n          }      \r\n        }\r\n        apiTweetList(props.username,handleTweetListLookup)  \r\n      }\r\n    }, [tweetsInit,tweetsDidSet,setTweetsDidSet,props.username])\r\n    \r\n    const handleDidRetweet = (newTweet)=>{\r\n      const updateTweetsInit =[...tweetsInit]\r\n      updateTweetsInit.unshift(newTweet)\r\n      setTweetsInit(updateTweetsInit)\r\n      const updateFinalTweets =[...tweets]\r\n      updateFinalTweets.unshift(tweets)\r\n      setTweetsInit(updateFinalTweets)\r\n  \r\n    }\r\n    const handleLoadNext= (event) => {\r\n      event.preventDefault()\r\n      if(nextUrl !== null){\r\n        const handleLoadNextResponse = (response ,status) => {\r\n          if (status===200){\r\n            setNextUrl(response.next)\r\n            const newTweets = [...tweets].concat(response.results)\r\n            setTweetsInit(newTweets)\r\n            setTweets(newTweets)            \r\n          } else{\r\n            alert(\"There was an error\")\r\n          }\r\n        }\r\n        apiTweetList(props.username,handleLoadNextResponse, nextUrl)\r\n      }\r\n    }\r\n    return <React.Fragment>{tweets.map((item,index)=>{ \r\n      return <Tweet didRetweet={handleDidRetweet} tweet={item} className='my-5 py-5 border bg-white text-dark' key ={`${index}-{item.id}`}/>\r\n  \r\n    })}\r\n    { nextUrl !== null && <button  onClick ={handleLoadNext} className='btn btn-primary'>Load next</button>}\r\n    </React.Fragment>\r\n  }\r\n  ","import React from 'react'\r\n\r\nimport {apiTweetCreate} from './lookup'\r\n\r\nexport function TweetCreate(props){\r\n    const {didTweet} =props    \r\n    const textAreaRef = React.createRef()    \r\n    const handleBackendUpdate =  (response,status) => {\r\n      if (status===201) {        \r\n        didTweet(response)\r\n      } else {\r\n        console.log(response)\r\n        alert(\"An error occured please try again\")\r\n      }       \r\n\r\n    }\r\n\r\n    const handleSubmit = (event) =>{\r\n        event.preventDefault()\r\n        console.log(event) \r\n        \r\n        const newVal = textAreaRef.current.value\r\n        \r\n        console.log(newVal, 'new value')\r\n        \r\n        apiTweetCreate(newVal,handleBackendUpdate)\r\n                \r\n        \r\n        textAreaRef.current.value='' \r\n    }\r\n\r\n    return <div className={props.className}>\r\n                <div className='col-12 mb-3'>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\r\n                        </textarea>\r\n                        <button type='submit' className='btn btn-primary my-3'>Tweet</button>    \r\n                    </form>\r\n                </div>          \r\n            </div>    \r\n}\r\n\r\n\r\n  \r\n\r\n\r\n\r\n","import React,{useEffect, useState} from 'react'\r\nimport {TweetList} from './list'\r\nimport {TweetCreate} from './create'\r\nimport { apiTweetDetail } from './lookup'\r\nimport { Tweet } from './detail'\r\n\r\n\r\n\r\n\r\nexport function TweetComponent(props) {\r\n    console.log(props)\r\n    \r\n    const canTweet =props.canTweet === \"false\" ? false : true    \r\n    const [newTweets, setNewTweets]= useState([])\r\n    const handleNewTweets =  (newTweet) => {\r\n      let tempNewTweets =[...newTweets]\r\n      tempNewTweets.unshift(newTweet)\r\n      setNewTweets(tempNewTweets)      \r\n    }   \r\n\r\n    return <div className={props.className}>\r\n              {canTweet === true &&<TweetCreate didTweet={handleNewTweets} div className='col-12 mb-3' />}\r\n          <TweetList newTweets={newTweets} {...props} />\r\n        </div>    \r\n}\r\n  \r\nexport function TweetDetailComponent(props) {\r\n  const {tweetId}= props\r\n  const[didLookup,setDidLookup] = useState(false)\r\n  const [tweet ,setTweet]= useState(null)\r\n  const handleBackendLookup = (response,status) => {\r\n    if (status===200){\r\n      setTweet(response)\r\n  } else {\r\n    alert(\"There was an error finding your tweet\")\r\n   }\r\n  }\r\n  useEffect(() => {\r\n    if (didLookup === false){\r\n      apiTweetDetail(tweetId,handleBackendLookup)\r\n      setDidLookup(true)\r\n    }\r\n  }, [tweetId,didLookup,setDidLookup])\r\n  return tweet === null ? null : <Tweet tweet={tweet} className={props.className} />\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetComponent} from './tweets'\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetComponent />\n        </div> \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { TweetComponent,TweetDetailComponent } from './tweets';\n\nconst appEl =document.getElementById('root')\nif (appEl){\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appEl\n  );\n}\n\nconst e = React.createElement\nconst tweetsEl= document.getElementById('tweetme')\nif (tweetsEl) {\n  console.log(tweetsEl.dataset)\n  ReactDOM.render(e(TweetComponent, tweetsEl.dataset), tweetsEl    \n  );\n\n}\n\n\nconst TweetDetailElements = document.querySelectorAll(\".tweetme-detail\")\nTweetDetailElements.forEach(container=>{\n  ReactDOM.render(e(TweetDetailComponent, container.dataset), container);\n})\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}