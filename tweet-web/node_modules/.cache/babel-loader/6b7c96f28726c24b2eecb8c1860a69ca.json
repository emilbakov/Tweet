{"ast":null,"code":"function getCookie(name) {\n  let cookieValue = null;\n\n  if (document.cookie && document.cookie !== \"\") {\n    const cookies = document.cookie.split(\";\");\n\n    for (let i = 0; i < cookies.length; i++) {\n      const cookie = cookies[i].trim(); // Does this cookie string begin with the name we want?\n\n      if (cookie.substring(0, name.length + 1) === name + \"=\") {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n\n  return cookieValue;\n}\n\nexport function backendLookup(method, endpoint, callback, data) {\n  let jsonData;\n\n  if (data) {\n    jsonData = JSON.stringify(data);\n  }\n\n  const xhr = new XMLHttpRequest();\n  const url = `http://localhost:8000/api${endpoint}`;\n  xhr.responseType = \"json\";\n  const csrftoken = getCookie('csrftoken');\n  xhr.open(method, url);\n\n  if (csrftoken) {\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken); //xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\n  }\n\n  ;\n\n  xhr.onload = function () {\n    if (xhr.status === 403) {\n      const detail = xhr.response.detail;\n      if (detail === \"Authentication credentials were not provided\") window.location.href = \"/login\";\n    }\n\n    callback(xhr.response, xhr.status);\n  };\n\n  xhr.onerror = function (e) {\n    console.log(e);\n    callback({\n      message: \"The request was an error\"\n    }, 400);\n  };\n\n  xhr.send(jsonData);\n}","map":{"version":3,"sources":["D:/test/Tweetme/tweet-web/src/lookup/components.js"],"names":["getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","open","setRequestHeader","onload","status","detail","response","window","location","href","onerror","e","console","log","message","send"],"mappings":"AAAA,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,MAAIC,WAAW,GAAG,IAAlB;;AACA,MAAIC,QAAQ,CAACC,MAAT,IAAmBD,QAAQ,CAACC,MAAT,KAAoB,EAA3C,EAA+C;AAC7C,UAAMC,OAAO,GAAGF,QAAQ,CAACC,MAAT,CAAgBE,KAAhB,CAAsB,GAAtB,CAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,YAAMH,MAAM,GAAGC,OAAO,CAACE,CAAD,CAAP,CAAWE,IAAX,EAAf,CADuC,CAEvC;;AACA,UAAIL,MAAM,CAACM,SAAP,CAAiB,CAAjB,EAAoBT,IAAI,CAACO,MAAL,GAAc,CAAlC,MAAyCP,IAAI,GAAG,GAApD,EAAyD;AACvDC,QAAAA,WAAW,GAAGS,kBAAkB,CAACP,MAAM,CAACM,SAAP,CAAiBT,IAAI,CAACO,MAAL,GAAc,CAA/B,CAAD,CAAhC;AACA;AACD;AACF;AACF;;AACD,SAAON,WAAP;AACD;;AAED,OAAO,SAASU,aAAT,CAAuBC,MAAvB,EAA+BC,QAA/B,EAAyCC,QAAzC,EAAmDC,IAAnD,EAAyD;AAC9D,MAAIC,QAAJ;;AACA,MAAID,IAAJ,EAAU;AACRC,IAAAA,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAX;AACD;;AACD,QAAMI,GAAG,GAAG,IAAIC,cAAJ,EAAZ;AACA,QAAMC,GAAG,GAAI,4BAA2BR,QAAS,EAAjD;AACAM,EAAAA,GAAG,CAACG,YAAJ,GAAmB,MAAnB;AACA,QAAMC,SAAS,GAAGxB,SAAS,CAAC,WAAD,CAA3B;AACAoB,EAAAA,GAAG,CAACK,IAAJ,CAASZ,MAAT,EAAiBS,GAAjB;;AAGA,MAAIE,SAAJ,EAAc;AAEZJ,IAAAA,GAAG,CAACM,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;AACAN,IAAAA,GAAG,CAACM,gBAAJ,CAAqB,kBAArB,EAAyC,gBAAzC;AACAN,IAAAA,GAAG,CAACM,gBAAJ,CAAqB,aAArB,EAAoCF,SAApC,EAJY,CAKZ;AACD;;AAAA;;AACDJ,EAAAA,GAAG,CAACO,MAAJ,GAAa,YAAY;AACvB,QAAIP,GAAG,CAACQ,MAAJ,KAAe,GAAnB,EAAwB;AACtB,YAAMC,MAAM,GAAET,GAAG,CAACU,QAAJ,CAAaD,MAA3B;AACA,UAAGA,MAAM,KAAK,8CAAd,EACAE,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB;AACD;;AACDlB,IAAAA,QAAQ,CAACK,GAAG,CAACU,QAAL,EAAeV,GAAG,CAACQ,MAAnB,CAAR;AACD,GAPD;;AAQAR,EAAAA,GAAG,CAACc,OAAJ,GAAc,UAAUC,CAAV,EAAa;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACApB,IAAAA,QAAQ,CAAC;AAAEuB,MAAAA,OAAO,EAAE;AAAX,KAAD,EAA0C,GAA1C,CAAR;AACD,GAHD;;AAKAlB,EAAAA,GAAG,CAACmB,IAAJ,CAAStB,QAAT;AACD","sourcesContent":["function getCookie(name) {\r\n  let cookieValue = null;\r\n  if (document.cookie && document.cookie !== \"\") {\r\n    const cookies = document.cookie.split(\";\");\r\n    for (let i = 0; i < cookies.length; i++) {\r\n      const cookie = cookies[i].trim();\r\n      // Does this cookie string begin with the name we want?\r\n      if (cookie.substring(0, name.length + 1) === name + \"=\") {\r\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\nexport function backendLookup(method, endpoint, callback, data) {\r\n  let jsonData;\r\n  if (data) {\r\n    jsonData = JSON.stringify(data);\r\n  }\r\n  const xhr = new XMLHttpRequest();\r\n  const url = `http://localhost:8000/api${endpoint}`\r\n  xhr.responseType = \"json\"\r\n  const csrftoken = getCookie('csrftoken')\r\n  xhr.open(method, url)\r\n  \r\n  \r\n  if (csrftoken){\r\n\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\") \r\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n    //xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\r\n  };\r\n  xhr.onload = function () {\r\n    if (xhr.status === 403) {\r\n      const detail= xhr.response.detail\r\n      if(detail === \"Authentication credentials were not provided\")\r\n      window.location.href = \"/login\"\r\n    }\r\n    callback(xhr.response, xhr.status);\r\n  };\r\n  xhr.onerror = function (e) {\r\n    console.log(e);\r\n    callback({ message: \"The request was an error\" }, 400)\r\n  };\r\n  \r\n  xhr.send(jsonData)\r\n}\r\n  "]},"metadata":{},"sourceType":"module"}