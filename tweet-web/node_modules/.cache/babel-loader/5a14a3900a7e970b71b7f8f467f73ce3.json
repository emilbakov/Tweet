{"ast":null,"code":"var _jsxFileName = \"D:\\\\test\\\\Tweetme\\\\tweet-web\\\\src\\\\tweets\\\\list.js\";\nimport React, { useEffect, useState } from 'react';\nimport { apiTweetList } from './lookup';\nimport { Tweet } from './detail';\nexport function TweetList(props) {\n  const [tweetsInit, setTweetsInit] = useState([]);\n  const [tweets, setTweets] = useState([]);\n  const [tweetsDidSet, setTweetsDidSet] = useState(false);\n  useEffect(() => {\n    const final = [...props.newTweets].concat(tweetsInit);\n\n    if (final.length !== tweets.length) {\n      setTweets(final);\n    }\n  }, [props.newTweets, tweets, tweetsInit]);\n  useEffect(() => {\n    //Lookup\n    if (tweetsDidSet === false) {\n      const handleTweetListLookup = (response, status) => {\n        if (status === 200) {\n          setTweetsInit(response);\n          setTweetsDidSet(true);\n        } else {\n          alert(\"There was an error\");\n        }\n      };\n\n      apiTweetList(props.username, handleTweetListLookup);\n    }\n  }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username]);\n\n  const handleDidRetweet = newTweet => {\n    const updateTweetsInit = [...tweetsInit];\n    updateTweetsInit.unshift(newTweet);\n    setTweetsInit(updateTweetsInit);\n    const updateFinalTweets = [...tweets];\n    updateFinalTweets.unshift(tweets);\n    setTweetsInit(updateFinalTweets);\n  };\n\n  return tweets.map((item, index) => {\n    return /*#__PURE__*/React.createElement(Tweet, {\n      didRetweet: handleDidRetweet,\n      tweet: item,\n      className: \"my-5 py-5 border bg-white text-dark\",\n      key: `${index}-{item.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 14\n      }\n    });\n  });\n}","map":{"version":3,"sources":["D:/test/Tweetme/tweet-web/src/tweets/list.js"],"names":["React","useEffect","useState","apiTweetList","Tweet","TweetList","props","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","final","newTweets","concat","length","handleTweetListLookup","response","status","alert","username","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,SAAQC,YAAR,QAA2B,UAA3B;AACA,SAAQC,KAAR,QAAoB,UAApB;AAGA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAC7B,QAAK,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,EAAD,CAA3C;AACA,QAAM,CAACO,MAAD,EAAQC,SAAR,IAAqBR,QAAQ,CAAC,EAAD,CAAnC;AACA,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,KAAD,CAAhD;AACAD,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMY,KAAK,GAAG,CAAC,GAAGP,KAAK,CAACQ,SAAV,EAAqBC,MAArB,CAA4BR,UAA5B,CAAd;;AACA,QAAGM,KAAK,CAACG,MAAN,KAAiBP,MAAM,CAACO,MAA3B,EAAmC;AACjCN,MAAAA,SAAS,CAACG,KAAD,CAAT;AACD;AAEJ,GANQ,EAMN,CAACP,KAAK,CAACQ,SAAP,EAAiBL,MAAjB,EAAwBF,UAAxB,CANM,CAAT;AAQAN,EAAAA,SAAS,CAAC,MAAI;AACV;AACA,QAAIU,YAAY,KAAI,KAApB,EAA2B;AAC3B,YAAMM,qBAAqB,GAAE,CAACC,QAAD,EAAUC,MAAV,KAAoB;AAC/C,YAAIA,MAAM,KAAG,GAAb,EAAiB;AACfX,UAAAA,aAAa,CAACU,QAAD,CAAb;AACAN,UAAAA,eAAe,CAAC,IAAD,CAAf;AACD,SAHD,MAGM;AACJQ,UAAAA,KAAK,CAAC,oBAAD,CAAL;AACD;AACF,OAPD;;AAQAjB,MAAAA,YAAY,CAACG,KAAK,CAACe,QAAP,EAAgBJ,qBAAhB,CAAZ;AACD;AACF,GAbQ,EAaN,CAACV,UAAD,EAAYI,YAAZ,EAAyBC,eAAzB,EAAyCN,KAAK,CAACe,QAA/C,CAbM,CAAT;;AAeA,QAAMC,gBAAgB,GAAIC,QAAD,IAAY;AACnC,UAAMC,gBAAgB,GAAE,CAAC,GAAGjB,UAAJ,CAAxB;AACAiB,IAAAA,gBAAgB,CAACC,OAAjB,CAAyBF,QAAzB;AACAf,IAAAA,aAAa,CAACgB,gBAAD,CAAb;AACA,UAAME,iBAAiB,GAAE,CAAC,GAAGjB,MAAJ,CAAzB;AACAiB,IAAAA,iBAAiB,CAACD,OAAlB,CAA0BhB,MAA1B;AACAD,IAAAA,aAAa,CAACkB,iBAAD,CAAb;AAED,GARD;;AAUA,SAAOjB,MAAM,CAACkB,GAAP,CAAW,CAACC,IAAD,EAAMC,KAAN,KAAc;AAC9B,wBAAO,oBAAC,KAAD;AAAO,MAAA,UAAU,EAAEP,gBAAnB;AAAqC,MAAA,KAAK,EAAEM,IAA5C;AAAkD,MAAA,SAAS,EAAC,qCAA5D;AAAkG,MAAA,GAAG,EAAI,GAAEC,KAAM,YAAjH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAED,GAHM,CAAP;AAKD","sourcesContent":["import React,{useEffect, useState} from 'react'\r\nimport {apiTweetList} from './lookup'\r\nimport {Tweet} from './detail'\r\n\r\n\r\nexport function TweetList(props) {\r\n    const[tweetsInit, setTweetsInit] = useState([])\r\n    const [tweets,setTweets] = useState([])\r\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\r\n    useEffect(()=>{\r\n        const final = [...props.newTweets].concat(tweetsInit)\r\n        if(final.length !== tweets.length) {\r\n          setTweets(final)\r\n        } \r\n  \r\n    }, [props.newTweets,tweets,tweetsInit])\r\n  \r\n    useEffect(()=>{\r\n        //Lookup\r\n        if (tweetsDidSet=== false) {\r\n        const handleTweetListLookup= (response,status) =>{      \r\n          if (status===200){\r\n            setTweetsInit(response)\r\n            setTweetsDidSet(true)\r\n          } else{\r\n            alert(\"There was an error\")\r\n          }      \r\n        }\r\n        apiTweetList(props.username,handleTweetListLookup)  \r\n      }\r\n    }, [tweetsInit,tweetsDidSet,setTweetsDidSet,props.username])\r\n    \r\n    const handleDidRetweet = (newTweet)=>{\r\n      const updateTweetsInit =[...tweetsInit]\r\n      updateTweetsInit.unshift(newTweet)\r\n      setTweetsInit(updateTweetsInit)\r\n      const updateFinalTweets =[...tweets]\r\n      updateFinalTweets.unshift(tweets)\r\n      setTweetsInit(updateFinalTweets)\r\n  \r\n    }\r\n  \r\n    return tweets.map((item,index)=>{ \r\n      return <Tweet didRetweet={handleDidRetweet} tweet={item} className='my-5 py-5 border bg-white text-dark' key ={`${index}-{item.id}`}/>\r\n  \r\n    })\r\n  \r\n  }\r\n  "]},"metadata":{},"sourceType":"module"}